{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u0430\u043c\u0447\u0443\u043a \u0410\u043d\u0438\u0442\u0430 K33402 GitHub https://github.com/Fokkely/ITMO_ICT_WebDevelopment_2022-2023 \u0417\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431 https://drive.google.com/drive/folders/1XxprDuBrFDanAB7HjlrqWb-4Jp8t-b3W","title":"About me"},{"location":"#k33402","text":"","title":"\u0421\u0430\u043c\u0447\u0443\u043a \u0410\u043d\u0438\u0442\u0430 K33402"},{"location":"#github","text":"https://github.com/Fokkely/ITMO_ICT_WebDevelopment_2022-2023","title":"GitHub"},{"location":"#_1","text":"https://drive.google.com/drive/folders/1XxprDuBrFDanAB7HjlrqWb-4Jp8t-b3W","title":"\u0417\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431"},{"location":"LR1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. server_1.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: conn, addr = sock.recvfrom(1024) print('client addr: ', addr) sock.sendto(b'Hello, client', addr) sock.close client_1.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('', 9090)) sock.send(b'Hello, server') data = sock.recvfrom(1024) sock.close print(data[0].decode('utf-8')) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 server_2.py import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 8080)) sock.listen(1) conn, addr = sock.accept() while True: data = conn.recv(1024) if not data: break udata = data.decode('utf-8').split(',') for i in range(len(udata)): udata[i] = int(udata[i]) if udata[0] == 1: c = sqrt(udata[1]**2 + udata[2]**2) else: c = sqrt(max(udata[1], udata[2])**2 - min(udata[1], udata[2])**2) if c == 0: c = '\u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435' conn.send(str(c).encode('utf-8')) conn.close client_2.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('', 8080)) print('\u0427\u0442\u043e \u0432\u0430\u043c \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c?\\n1)\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430\\n2)\u041a\u0430\u0442\u0435\u0442') answer = input() print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b') a, b = map(int, input().split()) sock.send(f'{answer},{a},{b}'.encode('utf-8')) data = sock.recv(1024) sock.close \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. server_3.py import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 7070)) sock.listen(10) conn, addr = sock.accept() while True: html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n\\n' + html_content index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>The room</title> </head> <body> <img src=\"https://c.tenor.com/d4NXy1SxPc0AAAAd/i-did-not-hit-her-its-not-true.gif\" alt=\"The room\"> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. server_4.py import socket from threading import Thread server_host = \"0.0.0.0\" server_port = 6060 separator_token = \"<SEP>\" client_sockets = set() s = socket.socket() s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((server_host, server_port)) s.listen(5) print(f\"[*] Listening as {server_host}:{server_port}\") def listen_for_client(cs): while True: try: msg = cs.recv(1024).decode() except Exception as e: print(f\"[!] Error: {e}\") client_sockets.remove(cs) else: msg = msg.replace(separator_token, \": \") for client_socket in client_sockets: if client_socket != cs: client_socket.send(msg.encode()) while True: client_socket, client_address = s.accept() print(f\"[+] {client_address} connected.\") client_sockets.add(client_socket) t = Thread(target=listen_for_client, args=(client_socket,), daemon=True) t.start() for cs in client_sockets: cs.close() s.close() client_4.py import socket from threading import Thread server_host = \"127.0.0.1\" server_port = 6060 separator_token = \"<SEP>\" sock = socket.socket() print(f\"[*] Connecting to {server_host}:{server_port}...\") sock.connect((server_host, server_port)) print(\"[+] Connected.\") name = input(\"Enter your name: \") def listen_for_messages(): while True: message = sock.recv(1024).decode() print(message) t = Thread(target=listen_for_messages) t.daemon = True t.start() while True: to_send = input() if to_send.lower() == 'q': break to_send = f\"{name}{separator_token}{to_send}\" sock.send(to_send.encode()) sock.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. server_5.py import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label>' \\ '<input name=\"discipline\" />' \\ '<br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label>' \\ '<input name=\"grade\"/>' \\ '<input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"LR1"},{"location":"LR1/#no1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161"},{"location":"LR1/#no1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21161"},{"location":"LR1/#server_1py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9090)) while True: conn, addr = sock.recvfrom(1024) print('client addr: ', addr) sock.sendto(b'Hello, client', addr) sock.close","title":"server_1.py"},{"location":"LR1/#client_1py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.connect(('', 9090)) sock.send(b'Hello, server') data = sock.recvfrom(1024) sock.close print(data[0].decode('utf-8'))","title":"client_1.py"},{"location":"LR1/#no2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21162"},{"location":"LR1/#server_2py","text":"import socket from math import sqrt sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('', 8080)) sock.listen(1) conn, addr = sock.accept() while True: data = conn.recv(1024) if not data: break udata = data.decode('utf-8').split(',') for i in range(len(udata)): udata[i] = int(udata[i]) if udata[0] == 1: c = sqrt(udata[1]**2 + udata[2]**2) else: c = sqrt(max(udata[1], udata[2])**2 - min(udata[1], udata[2])**2) if c == 0: c = '\u0412\u044b \u0432\u0432\u0435\u043b\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435' conn.send(str(c).encode('utf-8')) conn.close","title":"server_2.py"},{"location":"LR1/#client_2py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect(('', 8080)) print('\u0427\u0442\u043e \u0432\u0430\u043c \u043d\u0430\u0434\u043e \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c?\\n1)\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430\\n2)\u041a\u0430\u0442\u0435\u0442') answer = input() print('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b') a, b = map(int, input().split()) sock.send(f'{answer},{a},{b}'.encode('utf-8')) data = sock.recv(1024) sock.close","title":"client_2.py"},{"location":"LR1/#no3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21163"},{"location":"LR1/#server_3py","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 7070)) sock.listen(10) conn, addr = sock.accept() while True: html_page = open('index.html') html_content = html_page.read() html_page.close() html_response = 'HTTP/1.0 200 OK\\n\\n' + html_content","title":"server_3.py"},{"location":"LR1/#indexhtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>The room</title> </head> <body> <img src=\"https://c.tenor.com/d4NXy1SxPc0AAAAd/i-did-not-hit-her-its-not-true.gif\" alt=\"The room\"> </body> </html>","title":"index.html"},{"location":"LR1/#no4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21164"},{"location":"LR1/#server_4py","text":"import socket from threading import Thread server_host = \"0.0.0.0\" server_port = 6060 separator_token = \"<SEP>\" client_sockets = set() s = socket.socket() s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((server_host, server_port)) s.listen(5) print(f\"[*] Listening as {server_host}:{server_port}\") def listen_for_client(cs): while True: try: msg = cs.recv(1024).decode() except Exception as e: print(f\"[!] Error: {e}\") client_sockets.remove(cs) else: msg = msg.replace(separator_token, \": \") for client_socket in client_sockets: if client_socket != cs: client_socket.send(msg.encode()) while True: client_socket, client_address = s.accept() print(f\"[+] {client_address} connected.\") client_sockets.add(client_socket) t = Thread(target=listen_for_client, args=(client_socket,), daemon=True) t.start() for cs in client_sockets: cs.close() s.close()","title":"server_4.py"},{"location":"LR1/#client_4py","text":"import socket from threading import Thread server_host = \"127.0.0.1\" server_port = 6060 separator_token = \"<SEP>\" sock = socket.socket() print(f\"[*] Connecting to {server_host}:{server_port}...\") sock.connect((server_host, server_port)) print(\"[+] Connected.\") name = input(\"Enter your name: \") def listen_for_messages(): while True: message = sock.recv(1024).decode() print(message) t = Thread(target=listen_for_messages) t.daemon = True t.start() while True: to_send = input() if to_send.lower() == 'q': break to_send = f\"{name}{separator_token}{to_send}\" sock.send(to_send.encode()) sock.close()","title":"client_4.py"},{"location":"LR1/#no5","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u21165"},{"location":"LR1/#server_5py","text":"import socket class Response: def __init__(self, status, reason, headers=None, body=None): self.status = status self.reason = reason self.headers = headers self.body = body class MyHTTPServer: def __init__(self, host, port): self.host = host self.port = port self.marks = {} def serve_forever(self): serv_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) try: serv_sock.bind((self.host, self.port)) serv_sock.listen() while True: client, address = serv_sock.accept() self.serve_client(client) except KeyboardInterrupt: serv_sock.close() def serve_client(self, client): try: data = client.recv(1024).decode('UTF-8') req = self.parse_request(data) res = self.handle_request(req) self.send_response(client, res) except Exception as e: print(e) client.close() def parse_request(self, data): req = data.rstrip('\\r\\n') words = req[:data.index(\"\\n\")].split() if len(words) != 3: raise Exception('Malformed request line') method, target, ver = words if ver != 'HTTP/1.1': raise Exception('Unexpected HTTP version') request = {'data': {}, 'method': method} if '?' in target: request['method'] = 'POST' values = target.split('?')[1].split('&') for value in values: a, b = value.split('=') request['data'][a] = b return request def handle_request(self, req): if req['method'] == 'POST': return self.handle_post(req) else: return self.handle_get() def handle_get(self): content_type = 'text/html; charset=utf-8' body = '<html><head><style></style></head><body>' body += '<form method=\"GET\"><label>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</label>' \\ '<input name=\"discipline\" />' \\ '<br><label>\u041e\u0446\u0435\u043d\u043a\u0430</label>' \\ '<input name=\"grade\"/>' \\ '<input type=\"submit\"></form>' for subject in self.marks: body += f'<div><span>{subject}: {self.marks[subject]}</span></div>' body += '</div></body></html>' body = body.encode('utf-8') headers = [('Content-Type', content_type), ('Content-Length', len(body))] return Response(200, 'OK', headers, body) def handle_post(self, request): discipline = request['data']['discipline'] grade = request['data']['grade'] if discipline not in self.marks: self.marks[discipline] = [] self.marks[discipline].append(grade) return self.handle_get() def send_response(self, conn, resp): rfile = conn.makefile('wb') status_line = f'HTTP/1.1 {resp.status} {resp.reason}\\r\\n' rfile.write(status_line.encode('utf-8')) if resp.headers: for (key, value) in resp.headers: header_line = f'{key}: {value}\\r\\n' rfile.write(header_line.encode('utf-8')) rfile.write(b'\\r\\n') if resp.body: rfile.write(resp.body) rfile.flush() rfile.close() if __name__ == '__main__': host = '127.0.0.1' port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"server_5.py"},{"location":"LR2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162 \u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430: \u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u0433\u043e\u0432: \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u0442\u0435\u0433\u0443: \u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438: \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432: \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f: \u041b\u043e\u0433\u0438\u043d: \u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438): \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f: \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u041c\u043e\u0434\u0435\u043b\u0438 \u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f class Conference(models.Model): name = models.CharField(max_length=300) topics = models.ManyToManyField('Tag', blank=True, related_name='confs') place = models.CharField(max_length=50) date = models.DateTimeField(blank=True) participants = models.ManyToManyField('Participant', through='Performance') conf_description = models.CharField(max_length=1000) place_description = models.CharField(max_length=150) terms_of_participation = models.CharField(max_length=500) def get_absolute_url(self): return reverse('conf_registration_url', kwargs={'name': self.name}) def get_absolute_reg_url(self): return reverse('registration_url', kwargs={'name': self.name}) def __str__(self): return self.name \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a) class Participant(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=30) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) is_superuser = models.BooleanField(default=True) def __str__(self): return f\"{self.first_name} {self.last_name}\" \u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 class Performance(models.Model): title = models.CharField(max_length=300) description = models.TextField() is_recommended = models.BooleanField(default=False) author = models.ForeignKey(Participant, on_delete=models.CASCADE) conference = models.ForeignKey(Conference, on_delete=models.CASCADE) def __str__(self) -> str: return f\"{self.title} by {self.author.first_name} {self.author.last_name} at {self.conference.name}\" \u0422\u0435\u043c\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 class Tag(models.Model): title = models.CharField(max_length=50) def get_absolute_url(self): return reverse('tags_detail_url', kwargs={'title': self.title}) def __str__(self): return self.title \u041e\u0442\u0437\u044b\u0432 class Comment(models.Model): post = models.ForeignKey(Conference, on_delete=models.CASCADE, related_name='comments') author = models.ForeignKey(Participant, on_delete=models.CASCADE) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) body = models.TextField() created_on = models.DateTimeField(auto_now_add=True) def __str__(self): return f\"Comment {self.body} by {self.author.username}\" \u0421\u0441\u044b\u043b\u043a\u0438 urlpatterns = [ path('login', views.LoginView.as_view(), name='login_url'), path('logout', views.LogoutView.as_view(), name='logout_url'), path('registration', user_registration, name='user_registration_url'), path('', conf_list, name='conf_list_url'), path('conf/<str:name>/', conf_registration, name='conf_registration_url'), path('tags/', tags_list, name='tags_list_url'), path('tag/<str:title>', tags_detail, name='tags_detail_url'), path('account', account, name='account_url'), path('conf/<str:name>/registration', registration, name='registration_url'), path('<str:pk>/editing', performance_edit, name='performance_edit_url'), path('<str:pk>/delete', performance_delete, name='performance_delete_url'), ] \u0424\u043e\u0440\u043c\u044b \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f class RegisterForm(forms.ModelForm): class Meta: model = Participant help_texts = { 'username': None, } fields = [ 'username', 'last_name', 'first_name', 'password', ] labels = { 'username': '\u041b\u043e\u0433\u0438\u043d', 'last_name': '\u0424\u0430\u043c\u0438\u043b\u0438\u044f', 'first_name': '\u0418\u043c\u044f', 'password': '\u041f\u0430\u0440\u043e\u043b\u044c' } \u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e class ConferenceRegisterForm(forms.ModelForm): class Meta: model = Performance fields = [ 'title', 'description', ] labels = { 'title': '\u0422\u0435\u043c\u0430', 'description': '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435' } \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430 class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [ 'body', 'rating' ] widgets = { 'body': forms.Textarea(attrs={'rows': 3, 'cols': 40}), } labels = { 'rating': '\u041e\u0446\u0435\u043d\u043a\u0430', 'body': '\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f' } Views def conf_list(request): confs = Conference.objects.all() return render(request, 'TheConference/index.html', context={'confs': confs}) def conf_registration(request, name): try: conf = get_object_or_404(Conference, name__iexact=name) perfs = Performance.objects.filter(conference=conf) comments = Comment.objects.filter(post=conf) context = { 'conf': conf, 'perfs': perfs, 'comments': comments } form = CommentForm(request.POST or None) context['form'] = form if form.is_valid(): comment = form.save(commit=False) comment.author = Participant.objects.get(pk=request.user.id) comment.post = conf comment.save() except Conference.DoesNotExist: raise Http404(\"Conference does not exist\") return render(request, 'TheConference/registration.html', context) def registration(request, name): conf = get_object_or_404(Conference, name__iexact=name) context = {'conf': conf} if not request.user.is_authenticated: return redirect('/login') form = ConferenceRegisterForm(request.POST or None) if form.is_valid(): performance = form.save(commit=False) performance.author = Participant.objects.get(id=request.user.id) performance.conference = Conference.objects.get(name=name) performance.save() return redirect(f'/conf/{name}') context['form'] = form return render(request, 'TheConference/conf_registration.html', context) def user_registration(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() username = form.cleaned_data.get('username') raw_password = form.cleaned_data.get('password') user = form.save() # user = authenticate(username=username, password=raw_password) login(request, user, backend='django.contrib.auth.backends.ModelBackend') return redirect('/') else: form = RegisterForm() return render(request, 'TheConference/registration/user_registration.html', {'form': form}) @login_required def profile(request): return render(request, 'TheConference/registration/login.html') def account(request): perfs = Performance.objects.filter(author=request.user) return render(request, 'TheConference/account.html', context={'perfs': perfs}) def performance_edit(request, pk): context = {} instance = get_object_or_404(Performance, id=pk, author=request.user.id) form = ConferenceRegisterForm(request.POST or None, instance=instance) if form.is_valid(): form.save() return redirect('/account') context['form'] = form context['pk'] = pk return render(request, 'TheConference/edit_performance.html', context) def performance_delete(request, pk): if not request.user.is_authenticated: return redirect('/login') instance = get_object_or_404(Performance, id=pk, author=request.user.id) print(instance) instance.delete() return redirect('/account') def tags_list(request): tags = Tag.objects.all() return render(request, 'TheConference/tags_list.html', context={'tags': tags}) def tags_detail(request, title): tag = get_object_or_404(Tag, title__iexact=title) return render(request, 'TheConference/tags_detail.html', context={'tag': tag})","title":"LR2"},{"location":"LR2/#no2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162"},{"location":"LR2/#_1","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439"},{"location":"LR2/#_2","text":"","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430:"},{"location":"LR2/#_3","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0442\u0435\u0433\u043e\u0432:"},{"location":"LR2/#_4","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e \u0442\u0435\u0433\u0443:"},{"location":"LR2/#_5","text":"","title":"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:"},{"location":"LR2/#_6","text":"","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432:"},{"location":"LR2/#_7","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u0435:"},{"location":"LR2/#_8","text":"","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432:"},{"location":"LR2/#_9","text":"","title":"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438:"},{"location":"LR2/#_10","text":"","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f:"},{"location":"LR2/#_11","text":"","title":"\u041b\u043e\u0433\u0438\u043d:"},{"location":"LR2/#_12","text":"","title":"\u041b\u0438\u0447\u043d\u044b\u0439 \u043a\u0430\u0431\u0438\u043d\u0435\u0442 (\u0441 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438):"},{"location":"LR2/#_13","text":"","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f:"},{"location":"LR2/#_14","text":"","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u0441\u043b\u0435 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"LR2/#_15","text":"","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"LR2/#_16","text":"class Conference(models.Model): name = models.CharField(max_length=300) topics = models.ManyToManyField('Tag', blank=True, related_name='confs') place = models.CharField(max_length=50) date = models.DateTimeField(blank=True) participants = models.ManyToManyField('Participant', through='Performance') conf_description = models.CharField(max_length=1000) place_description = models.CharField(max_length=150) terms_of_participation = models.CharField(max_length=500) def get_absolute_url(self): return reverse('conf_registration_url', kwargs={'name': self.name}) def get_absolute_reg_url(self): return reverse('registration_url', kwargs={'name': self.name}) def __str__(self): return self.name","title":"\u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f"},{"location":"LR2/#_17","text":"class Participant(AbstractUser): username = models.CharField(max_length=30, unique=True) password = models.CharField(max_length=30) first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) is_superuser = models.BooleanField(default=True) def __str__(self): return f\"{self.first_name} {self.last_name}\"","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c (\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a)"},{"location":"LR2/#_18","text":"class Performance(models.Model): title = models.CharField(max_length=300) description = models.TextField() is_recommended = models.BooleanField(default=False) author = models.ForeignKey(Participant, on_delete=models.CASCADE) conference = models.ForeignKey(Conference, on_delete=models.CASCADE) def __str__(self) -> str: return f\"{self.title} by {self.author.first_name} {self.author.last_name} at {self.conference.name}\"","title":"\u0412\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438"},{"location":"LR2/#_19","text":"class Tag(models.Model): title = models.CharField(max_length=50) def get_absolute_url(self): return reverse('tags_detail_url', kwargs={'title': self.title}) def __str__(self): return self.title","title":"\u0422\u0435\u043c\u044b \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438"},{"location":"LR2/#_20","text":"class Comment(models.Model): post = models.ForeignKey(Conference, on_delete=models.CASCADE, related_name='comments') author = models.ForeignKey(Participant, on_delete=models.CASCADE) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) body = models.TextField() created_on = models.DateTimeField(auto_now_add=True) def __str__(self): return f\"Comment {self.body} by {self.author.username}\"","title":"\u041e\u0442\u0437\u044b\u0432"},{"location":"LR2/#_21","text":"urlpatterns = [ path('login', views.LoginView.as_view(), name='login_url'), path('logout', views.LogoutView.as_view(), name='logout_url'), path('registration', user_registration, name='user_registration_url'), path('', conf_list, name='conf_list_url'), path('conf/<str:name>/', conf_registration, name='conf_registration_url'), path('tags/', tags_list, name='tags_list_url'), path('tag/<str:title>', tags_detail, name='tags_detail_url'), path('account', account, name='account_url'), path('conf/<str:name>/registration', registration, name='registration_url'), path('<str:pk>/editing', performance_edit, name='performance_edit_url'), path('<str:pk>/delete', performance_delete, name='performance_delete_url'), ]","title":"\u0421\u0441\u044b\u043b\u043a\u0438"},{"location":"LR2/#_22","text":"","title":"\u0424\u043e\u0440\u043c\u044b"},{"location":"LR2/#_23","text":"class RegisterForm(forms.ModelForm): class Meta: model = Participant help_texts = { 'username': None, } fields = [ 'username', 'last_name', 'first_name', 'password', ] labels = { 'username': '\u041b\u043e\u0433\u0438\u043d', 'last_name': '\u0424\u0430\u043c\u0438\u043b\u0438\u044f', 'first_name': '\u0418\u043c\u044f', 'password': '\u041f\u0430\u0440\u043e\u043b\u044c' }","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f"},{"location":"LR2/#_24","text":"class ConferenceRegisterForm(forms.ModelForm): class Meta: model = Performance fields = [ 'title', 'description', ] labels = { 'title': '\u0422\u0435\u043c\u0430', 'description': '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435' }","title":"\u0424\u043e\u0440\u043c\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e"},{"location":"LR2/#_25","text":"class CommentForm(forms.ModelForm): class Meta: model = Comment fields = [ 'body', 'rating' ] widgets = { 'body': forms.Textarea(attrs={'rows': 3, 'cols': 40}), } labels = { 'rating': '\u041e\u0446\u0435\u043d\u043a\u0430', 'body': '\u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f' }","title":"\u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430"},{"location":"LR2/#views","text":"def conf_list(request): confs = Conference.objects.all() return render(request, 'TheConference/index.html', context={'confs': confs}) def conf_registration(request, name): try: conf = get_object_or_404(Conference, name__iexact=name) perfs = Performance.objects.filter(conference=conf) comments = Comment.objects.filter(post=conf) context = { 'conf': conf, 'perfs': perfs, 'comments': comments } form = CommentForm(request.POST or None) context['form'] = form if form.is_valid(): comment = form.save(commit=False) comment.author = Participant.objects.get(pk=request.user.id) comment.post = conf comment.save() except Conference.DoesNotExist: raise Http404(\"Conference does not exist\") return render(request, 'TheConference/registration.html', context) def registration(request, name): conf = get_object_or_404(Conference, name__iexact=name) context = {'conf': conf} if not request.user.is_authenticated: return redirect('/login') form = ConferenceRegisterForm(request.POST or None) if form.is_valid(): performance = form.save(commit=False) performance.author = Participant.objects.get(id=request.user.id) performance.conference = Conference.objects.get(name=name) performance.save() return redirect(f'/conf/{name}') context['form'] = form return render(request, 'TheConference/conf_registration.html', context) def user_registration(request): if request.method == 'POST': form = RegisterForm(request.POST) if form.is_valid(): form.save() username = form.cleaned_data.get('username') raw_password = form.cleaned_data.get('password') user = form.save() # user = authenticate(username=username, password=raw_password) login(request, user, backend='django.contrib.auth.backends.ModelBackend') return redirect('/') else: form = RegisterForm() return render(request, 'TheConference/registration/user_registration.html', {'form': form}) @login_required def profile(request): return render(request, 'TheConference/registration/login.html') def account(request): perfs = Performance.objects.filter(author=request.user) return render(request, 'TheConference/account.html', context={'perfs': perfs}) def performance_edit(request, pk): context = {} instance = get_object_or_404(Performance, id=pk, author=request.user.id) form = ConferenceRegisterForm(request.POST or None, instance=instance) if form.is_valid(): form.save() return redirect('/account') context['form'] = form context['pk'] = pk return render(request, 'TheConference/edit_performance.html', context) def performance_delete(request, pk): if not request.user.is_authenticated: return redirect('/login') instance = get_object_or_404(Performance, id=pk, author=request.user.id) print(instance) instance.delete() return redirect('/account') def tags_list(request): tags = Tag.objects.all() return render(request, 'TheConference/tags_list.html', context={'tags': tags}) def tags_detail(request, title): tag = get_object_or_404(Tag, title__iexact=title) return render(request, 'TheConference/tags_detail.html', context={'tag': tag})","title":"Views"},{"location":"LR3/","text":"","title":"LR3"},{"location":"LR4/","text":"","title":"LR4"}]}